import re
import sys

def generate(schema_filename, create_filename, drop_filename):
    contents = open(schema_filename, 'r').read()
    create_handle = open(create_filename, 'w')
    drop_handle = open(drop_filename, 'w')
    print >>create_handle, '-- DO NOT MODIFY THIS FILE OR CHECK IT INTO A VCS'
    print >>create_handle, '-- Generated automatically by %s' % sys.argv[0]
    print >>create_handle, '-- Source file: %s' % schema_filename
    print >>create_handle
    print >>drop_handle, '-- DO NOT MODIFY THIS FILE OR CHECK IT INTO A VCS'
    print >>drop_handle, '-- Generated automatically by %s' % sys.argv[0]
    print >>drop_handle, '-- Source file: %s' % schema_filename
    print >>drop_handle
    tables = re.findall(r'CREATE TABLE (\S+) \((.*?)\);', contents, re.S)
    for table_name, fields in tables:
        rows = []
        for row in re.findall(r'\n\s*([^()]*?),', fields):
            name, datatype = row.split(None, 1)
            if name != 'id':
                rows.append((name, re.sub(r'\s*NOT NULL', '', datatype)))
        uniques = map(lambda s: s.strip(),
                      re.search(r'UNIQUE \((.*?)\)', fields).group(1).split(','))
        uniques.append('id')
        print >>create_handle, 'CREATE OR REPLACE FUNCTION'
        print >>create_handle, 'merge_%s(' % table_name
        parameters = []
        for name, datatype in rows:
            parameters.append('  v_%s %s' % (name, datatype))
        print >>create_handle, ',\n'.join(parameters)
        print >>create_handle, ') RETURNS integer AS $$'
        print >>create_handle, 'DECLARE'
        print >>create_handle, '  v_id integer;'
        print >>create_handle, 'BEGIN'
        print >>create_handle, '  BEGIN'
        print >>create_handle, '    INSERT INTO %s' % table_name
        print >>create_handle, '    (%s)' % ',\n     '.join(map(lambda r: r[0],
                                                                rows))
        print >>create_handle, '    VALUES (%s)' \
                % ',\n            '.join(map(lambda r: 'v_%s' % r[0], rows))
        print >>create_handle, '    RETURNING id INTO v_id;'
        print >>create_handle, '  EXCEPTION WHEN unique_violation THEN'
        print >>create_handle, '    UPDATE %s SET' % table_name
        assignments = []
        for name, datatype in rows:
            if name not in uniques:
                assignments.append('    %s = v_%s' % (name, name))
        print >>create_handle, ',\n'.join(assignments)
        print >>create_handle, '    WHERE',
        conditions = []
        for name, datatype in rows:
            if name in uniques:
                conditions.append('%s = v_%s' % (name, name))
        print >>create_handle, '\n    AND '.join(conditions)
        print >>create_handle, '    RETURNING id INTO v_id;'
        print >>create_handle, '  END;'
        print >>create_handle, '  RETURN v_id;'
        print >>create_handle, 'END;'
        print >>create_handle, '$$ LANGUAGE plpgsql;'
        print >>create_handle

        print >>drop_handle, 'DROP TABLE %s CASCADE;' % table_name
        print >>drop_handle, 'DROP FUNCTION merge_%s(' % table_name
        print >>drop_handle, '  ', ', '.join(map(lambda r: r[1], rows)), ');'

def main():
    generate('schema.sql',
             'merge_functions_autogenerated.sql',
             'drop_autogenerated.sql')

if __name__ == '__main__':
    main()
